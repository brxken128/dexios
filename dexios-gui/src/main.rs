use std::fs::File;

use crate::states::{Dexios, Tab};
use crate::utils::{hex_encode, Key};
use eframe::egui;

use dexios_core::header::{
    header_version_to_i32, HashingAlgorithm, Header, ARGON2ID_LATEST, BLAKE3BALLOON_LATEST,
};
use dexios_core::primitives::Algorithm;
use domain::utils::gen_passphrase;

mod decrypt;
mod encrypt;
mod error;
mod states;
mod utils;

fn main() {
    let options = eframe::NativeOptions::default();
    eframe::run_native(
        "DEXIOS",
        options,
        Box::new(|_cc| Box::new(Dexios::default())),
    );
}

impl eframe::App for Dexios {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        ctx.set_visuals(egui::Visuals::dark());
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.horizontal(|ui| {
                ui.selectable_value(&mut self.tab, Tab::Encrypt, "Encrypt");
                ui.selectable_value(&mut self.tab, Tab::Decrypt, "Decrypt");
                ui.selectable_value(&mut self.tab, Tab::HeaderDetails, "Header Details");
            });

            ui.separator();

            if self.tab == Tab::Encrypt {
                ui.horizontal(|ui| {
                    ui.label("AEAD: ");
                    egui::ComboBox::from_id_source("aead")
                        .selected_text(format!("{}", self.encrypt.algorithm))
                        .show_ui(ui, |ui| {
                            ui.selectable_value(
                                &mut self.encrypt.algorithm,
                                Algorithm::XChaCha20Poly1305,
                                "XChaCha20-Poly1305",
                            );
                            ui.selectable_value(
                                &mut self.encrypt.algorithm,
                                Algorithm::Aes256Gcm,
                                "AES-256-GCM",
                            );
                        });
                });

                ui.horizontal(|ui| {
                    ui.label("Hashing Algorithm: ");
                    egui::ComboBox::from_id_source("hashing")
                        .selected_text(format!("{}", self.encrypt.hash_algorithm))
                        .show_ui(ui, |ui| {
                            ui.selectable_value(
                                &mut self.encrypt.hash_algorithm,
                                HashingAlgorithm::Blake3Balloon(BLAKE3BALLOON_LATEST),
                                "BLAKE3-Balloon",
                            );
                            ui.selectable_value(
                                &mut self.encrypt.hash_algorithm,
                                HashingAlgorithm::Argon2id(ARGON2ID_LATEST),
                                "Argon2id",
                            );
                        });
                });

                ui.horizontal(|ui| {
                    ui.label("Input: ");
                    ui.add(
                        egui::TextEdit::singleline(&mut self.encrypt.input_path)
                            .hint_text("Path to the input file"),
                    );
                    if ui.button("Select File").clicked() {
                        if let Some(path) = rfd::FileDialog::new().pick_file() {
                            self.encrypt.input_path = path.as_path().display().to_string();
                            self.encrypt.output_path = self.encrypt.input_path.clone() + ".dx";
                        }
                    }
                });

                ui.horizontal(|ui| {
                    ui.label("Output File: ");
                    ui.add(
                        egui::TextEdit::singleline(&mut self.encrypt.output_path)
                            .hint_text("Path to the output file"),
                    );
                    if ui.button("Select File").clicked() {
                        if let Some(path) = rfd::FileDialog::new().pick_file() {
                            self.encrypt.output_path = path.as_path().display().to_string();
                        }
                    }
                });

                ui.horizontal(|ui| {
                    ui.radio_value(&mut self.encrypt.key, Key::Password, "Password");
                    ui.radio_value(&mut self.encrypt.key, Key::Keyfile, "Keyfile");
                    if ui
                        .radio_value(&mut self.encrypt.key, Key::AutoGenerate, "Auto Generate")
                        .clicked()
                    {
                        self.encrypt.autogenerated_passphrase =
                            gen_passphrase().expose().to_string();
                    };
                });

                if self.encrypt.key == Key::Password {
                    ui.horizontal(|ui| {
                        ui.label("Password: ");
                        ui.add(
                            egui::TextEdit::singleline(&mut self.encrypt.password)
                                .hint_text("Password: ")
                                .password(true),
                        );
                        ui.add(
                            egui::TextEdit::singleline(&mut self.encrypt.password_validation)
                                .hint_text("Password (for validation): ")
                                .password(true),
                        );
                    });
                }

                if self.encrypt.key == Key::Keyfile {
                    ui.horizontal(|ui| {
                        ui.label("Keyfile: ");

                        ui.add(
                            egui::TextEdit::singleline(&mut self.encrypt.keyfile_path)
                                .hint_text("Path to the keyfile"),
                        );
                        if ui.button("Select File").clicked() {
                            if let Some(path) = rfd::FileDialog::new().pick_file() {
                                self.encrypt.keyfile_path = path.as_path().display().to_string();
                            }
                        }
                    });
                }

                if self.encrypt.key == Key::AutoGenerate {
                    ui.horizontal(|ui| {
                        ui.label("Passphrase: ");
                        ui.add(egui::TextEdit::singleline(
                            &mut self.encrypt.autogenerated_passphrase,
                        ));
                    });
                }

                if ui.button("Encrypt File").clicked() {
                    crate::encrypt::execute(&self.encrypt);
                }
            }

            if self.tab == Tab::Decrypt {
                ui.horizontal(|ui| {
                    ui.label("Input File: ");
                    ui.add(
                        egui::TextEdit::singleline(&mut self.decrypt.input_path)
                            .hint_text("Path to the input file"),
                    );
                    if ui.button("Select File").clicked() {
                        if let Some(path) = rfd::FileDialog::new().pick_file() {
                            self.decrypt.input_path = path.as_path().display().to_string();
                            // autoremove .dx extension if it's present, if not, leave blank
                        }
                    }
                });

                ui.horizontal(|ui| {
                    ui.label("Output File: ");
                    ui.add(
                        egui::TextEdit::singleline(&mut self.decrypt.output_path)
                            .hint_text("Path to the output file"),
                    );
                    if ui.button("Select File").clicked() {
                        if let Some(path) = rfd::FileDialog::new().pick_file() {
                            self.decrypt.output_path = path.as_path().display().to_string();
                        }
                    }
                });

                ui.horizontal(|ui| {
                    ui.radio_value(&mut self.decrypt.key, Key::Password, "Password");
                    ui.radio_value(&mut self.decrypt.key, Key::Keyfile, "Keyfile");
                });

                if self.decrypt.key == Key::Password {
                    ui.horizontal(|ui| {
                        ui.label("Password: ");
                        ui.add(
                            egui::TextEdit::singleline(&mut self.decrypt.password)
                                .hint_text("Password: ")
                                .password(true),
                        );
                    });
                }

                if self.decrypt.key == Key::Keyfile {
                    ui.horizontal(|ui| {
                        ui.label("Keyfile: ");

                        ui.add(
                            egui::TextEdit::singleline(&mut self.decrypt.keyfile_path)
                                .hint_text("Path to the keyfile"),
                        );
                        if ui.button("Select File").clicked() {
                            if let Some(path) = rfd::FileDialog::new().pick_file() {
                                self.decrypt.keyfile_path = path.as_path().display().to_string();
                            }
                        }
                    });
                }

                if ui.button("Decrypt File").clicked() {
                    crate::decrypt::execute(&self.decrypt);
                }
            }

            if self.tab == Tab::HeaderDetails {
                ui.horizontal(|ui| {
                    ui.label("Input File: ");
                    ui.add(
                        egui::TextEdit::singleline(&mut self.header_details.input_path)
                            .hint_text("Path to the input file"),
                    );
                    if ui.button("Select File").clicked() {
                        if let Some(path) = rfd::FileDialog::new().pick_file() {
                            self.header_details.input_path = path.as_path().display().to_string();
                        }
                    }
                });

                if ui.button("View Details").clicked() {
                    let mut reader = File::open(self.header_details.input_path.clone()).unwrap();
                    let (header, aad) = Header::deserialize(&mut reader).unwrap();
                    self.header_details.header = Some(header);
                    self.header_details.aad = Some(aad);
                }

                ui.separator();

                let text_height = egui::TextStyle::Body.resolve(ui.style()).size;

                use egui_extras::{Size, TableBuilder};
                TableBuilder::new(ui)
                    .striped(true)
                    .column(Size::initial(320.0))
                    .column(Size::initial(480.0))
                    .body(|mut body| {
                        if let Some(header) = &self.header_details.header {
                            if let Some(aad) = &self.header_details.aad {
                                body.row(text_height, |mut row| {
                                    row.col(|ui| {
                                        ui.label("Header Version:");
                                    });
                                    row.col(|ui| {
                                        ui.label(format!("{}", header.header_type.version));
                                    });
                                });
                                body.row(text_height, |mut row| {
                                    row.col(|ui| {
                                        ui.label("Encryption Algorithm:");
                                    });
                                    row.col(|ui| {
                                        ui.label(format!("{}", header.header_type.algorithm));
                                    });
                                });
                                body.row(text_height, |mut row| {
                                    row.col(|ui| {
                                        ui.label("Encryption Mode:");
                                    });
                                    row.col(|ui| {
                                        ui.label(format!("{}", header.header_type.mode));
                                    });
                                });
                                body.row(text_height, |mut row| {
                                    row.col(|ui| {
                                        ui.label("Encryption Nonce (hex):");
                                    });
                                    row.col(|ui| {
                                        ui.label(format!("{}", hex_encode(&header.nonce)));
                                    });
                                });
                                body.row(text_height, |mut row| {
                                    row.col(|ui| {
                                        ui.label("AAD (hex):");
                                    });
                                    row.col(|ui| {
                                        ui.label(format!("{}", hex_encode(&aad)));
                                    });
                                });

                                use dexios_core::header::HeaderVersion;
                                match header.header_type.version {
                                    HeaderVersion::V1 | HeaderVersion::V2 | HeaderVersion::V3 => {
                                        body.row(text_height, |mut row| {
                                            row.col(|ui| {
                                                ui.label("Salt (hex):");
                                            });
                                            row.col(|ui| {
                                                ui.label(format!(
                                                    "{}",
                                                    hex_encode(&header.salt.unwrap())
                                                ));
                                            });
                                        });
                                        body.row(text_height, |mut row| {
                                            row.col(|ui| {
                                                ui.label("Hashing Algorithm:");
                                            });
                                            row.col(|ui| {
                                                ui.label(format!(
                                                    "{}",
                                                    HashingAlgorithm::Argon2id(
                                                        header_version_to_i32(
                                                            &header.header_type.version
                                                        )
                                                    )
                                                ));
                                            });
                                        });
                                    }
                                    HeaderVersion::V4 | HeaderVersion::V5 => {
                                        for (i, keyslot) in
                                            header.keyslots.clone().unwrap().iter().enumerate()
                                        {
                                            body.row(text_height, |mut row| {
                                                row.col(|ui| {
                                                    ui.label(format!("Keyslot {}:", i));
                                                });
                                            });
                                            body.row(text_height, |mut row| {
                                                row.col(|ui| {
                                                    ui.label("    Hashing Algorithm::");
                                                });
                                                row.col(|ui| {
                                                    ui.label(format!("{}", keyslot.hash_algorithm));
                                                });
                                            });
                                            body.row(text_height, |mut row| {
                                                row.col(|ui| {
                                                    ui.label("    Salt (hex):");
                                                });
                                                row.col(|ui| {
                                                    ui.label(format!(
                                                        "{}",
                                                        hex_encode(&keyslot.salt)
                                                    ));
                                                });
                                            });
                                            body.row(text_height, |mut row| {
                                                row.col(|ui| {
                                                    ui.label("    Master Key (hex, encrypted):");
                                                });
                                                row.col(|ui| {
                                                    ui.label(format!(
                                                        "{}",
                                                        hex_encode(&keyslot.encrypted_key)
                                                    ));
                                                });
                                            });
                                            body.row(text_height, |mut row| {
                                                row.col(|ui| {
                                                    ui.label("    Master Key Nonce (hex):");
                                                });
                                                row.col(|ui| {
                                                    ui.label(format!(
                                                        "{}",
                                                        hex_encode(&keyslot.nonce)
                                                    ));
                                                });
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    });
            }
        });
    }
}
