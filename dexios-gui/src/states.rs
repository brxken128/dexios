use core::header::{HashingAlgorithm, Header, BLAKE3BALLOON_LATEST};
use core::primitives::Algorithm;

use crate::utils::Key;
#[derive(PartialEq)]
pub enum Tab {
    Encrypt,
    Decrypt,
    HeaderDetails,
}

pub struct Dexios {
    pub encrypt: Encrypt,
    pub decrypt: Decrypt,
    pub header_details: HeaderDetails,
    pub tab: Tab,
}

#[derive(Clone)]
pub struct Encrypt {
    pub algorithm: Algorithm,
    pub hash_algorithm: HashingAlgorithm,
    pub input_path: String,
    pub output_path: String,
    pub key: Key,
    pub keyfile_path: String,
    pub password: String,
    pub password_validation: String,
    pub autogenerated_passphrase: String,
}

#[derive(Clone)]
pub struct Decrypt {
    pub input_path: String,
    pub output_path: String,
    pub key: Key,
    pub keyfile_path: String,
    pub password: String,
}

pub struct HeaderDetails {
    pub input_path: String,
    pub header: Option<Header>,
    pub aad: Option<Vec<u8>>,
}

impl Default for HeaderDetails {
    fn default() -> Self {
        Self {
            input_path: "".to_owned(),
            header: None,
            aad: None,
        }
    }
}

impl Default for Encrypt {
    fn default() -> Self {
        Self {
            algorithm: Algorithm::XChaCha20Poly1305,
            hash_algorithm: HashingAlgorithm::Blake3Balloon(BLAKE3BALLOON_LATEST),
            input_path: "".to_owned(),
            output_path: "".to_owned(),
            key: Key::Password,
            keyfile_path: "".to_owned(),
            password: "".to_owned(),
            password_validation: "".to_owned(),
            autogenerated_passphrase: "".to_owned(),
        }
    }
}

impl Default for Decrypt {
    fn default() -> Self {
        Self {
            input_path: "".to_owned(),
            output_path: "".to_owned(),
            key: Key::Password,
            keyfile_path: "".to_owned(),
            password: "".to_owned(),
        }
    }
}

impl Default for Dexios {
    fn default() -> Self {
        Self {
            encrypt: Encrypt::default(),
            decrypt: Decrypt::default(),
            header_details: HeaderDetails::default(),
            tab: Tab::Encrypt,
        }
    }
}
